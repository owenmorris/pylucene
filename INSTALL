
  INSTALL file for PyLucene with JCC build
  ----------------------------------------

  Contents
  --------

   - Building PyLucene
   - Requirements
   - Notes for Solaris


  Building PyLucene
  -----------------

  PyLucene is now completely code-generated by JCC whose sources are
  included in the jcc sub-directory.

  Before building PyLucene, JCC must be built first. See JCC's INSTALL file
  in the jcc subdirectory for building and installing it.

  Once JCC is built and installed, PyLucene is built via a Makefile which
  invokes JCC. See PyLucene's Makefile for configuration instructions.

  There are limits to both how many files can fit on the command line and
  how large a C++ file the C++ compiler can handle.
  By default, JCC generates one large C++ file containing the source code
  for all wrapper classes.

  Using the --files command line argument, this behaviour can be tuned to
  workaround various limits:
  for example:
     - to break up the large wrapper class file into about 2 files:
       --files 2
     - to break up the large wrapper class file into about 10 files:
       --files 10    
     - to generate one C++ file per Java class wrapped:
       --files separate


  Requirements
  ------------

  To build PyLucene with JCC a Java Development Kit (JDK) and Ant [1] are
  required; use of the resulting PyLucene requires only a Java Runtime
  Environment (JRE).

  The setuptools package [2] is required to build and run PyLucene with JCC
  on Python 2.3.5. With later versions of Python, setuptools is only
  required for shared mode (see JCC's INSTALL for more information).

  [1] http://ant.apache.org
  [2] http://pypi.python.org/pypi/setuptools


  Notes for Solaris
  -----------------

  PyLucene's Makefile is a GNU Makefile. Be sure to use 'gmake' instead of
  plain 'make'.

  Just as when building JCC, Python's distutils must be nudged a bit to
  invoke the correct compiler. Sun Studio's C compiler is called 'cc' while
  its C++ compiler is called 'CC'.

  To build PyLucene, use the following shell command to ensure that the C++
  compiler is used: 

   $ CC=CC gmake
